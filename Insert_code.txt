const { Client } = require('@elastic/elasticsearch');
const express = require('express');
const bodyParser = require('body-parser');

const client = new Client({ node: 'http://localhost:9200' }); // Replace with your Elasticsearch server URL
const app = express();

app.use(bodyParser.json());

// Endpoint to perform filtering and aggregations
app.get('/aggregations', async (req, res) => {
  const { column, filterSeverity, filterAppName, filterChannelName } = req.query;

  if (!column) {
    return res.status(400).send('Column name is required');
  }

  // Define the aggregation based on the column parameter
  const aggregations = {
    app_name: {
      terms: { field: 'app_name', size: 10000 }
    },
    channel_name: {
      terms: { field: 'channel_name', size: 10000 }
    },
    severity: {
      stats: { field: 'severity' }
    },
    category: {
      terms: { field: 'category', size: 10000 }
    },
    issue_id: {
      terms: { field: 'issue_id', size: 10000 }
    }
  };

  // Check if the column parameter is valid
  if (!aggregations[column]) {
    return res.status(400).send('Invalid column name');
  }

  // Build the query
  const query = {
    bool: {
      must: []
    }
  };

  // Apply filters if specified
  if (filterSeverity) {
    query.bool.must.push({ term: { severity: filterSeverity } });
  }
  if (filterAppName) {
    query.bool.must.push({ term: { app_name: filterAppName } });
  }
  if (filterChannelName) {
    query.bool.must.push({ term: { channel_name: filterChannelName } });
  }

  try {
    const response = await client.search({
      index: 'incidents',
      body: {
        size: 0, // We are only interested in the aggregation results
        query: query.bool.must.length ? query : { match_all: {} },
        aggs: {
          [column]: aggregations[column]
        }
      }
    });

    // Extract the aggregation results
    const aggResult = response.aggregations[column];

    // Check for terms aggregation and explain the additional fields
    if (aggResult && aggResult.buckets) {
      const resultWithExplanation = {
        ...aggResult,
        explanation: {
          doc_count_error_upper_bound: "The maximum possible error in the document count due to shard-level approximation.",
          sum_other_doc_count: "The sum of document counts for all terms that are not included in the response."
        }
      };
      res.json(resultWithExplanation);
    } else {
      res.json(aggResult);
    }
  } catch (error) {
    console.error('Error performing aggregations:', error);
    res.status(500).send('Error performing aggregations');
  }
});

// Start the server
const port = 3000;
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
